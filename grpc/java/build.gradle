apply plugin: 'java'
apply plugin: 'com.google.protobuf'

dependencies {
    compile 'io.grpc:grpc-protobuf-lite:1.6.1'
    compile 'io.grpc:grpc-stub:1.6.1'
    // https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.grpc%22%20a%3A%22grpc-netty%22
    compile 'io.grpc:grpc-netty:1.6.1'

    protobuf files('../soseedy.proto')

}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"
buildscript {

    repositories {
        mavenCentral()
    }
    dependencies {
        // https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.google.protobuf%22%20a%3A%22protobuf-gradle-plugin%22
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
    }
}

repositories {
    mavenCentral()
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        // https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.google.protobuf%22%20a%3A%22protoc%22
        artifact = 'com.google.protobuf:protoc:3.4.0'
    }

    generatedFilesBaseDir = "$projectDir/src"

    // Configure the codegen plugins
    plugins {
        // Define a plugin with name 'grpc'
        grpc {
            // https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.grpc%22%20a%3A%22protoc-gen-grpc-java%22
            artifact = 'io.grpc:protoc-gen-grpc-java:1.6.1'
        }

        javalite {
            // https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22com.google.protobuf%22%20a%3A%22protoc-gen-javalite%22
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }

    generateProtoTasks {
        // all() = all proto tasks
        all().each { task ->
            task.builtins {
                remove java
            }
            task.plugins {
                javalite {
                    outputSubDir = 'java/'
                }
                // Add grpc output without any option.  grpc must have been defined in the
                // protobuf.plugins block.
                grpc {
                    // Options added to --grpc_out
                    option 'lite'
                    outputSubDir = 'java/'
                }
            }
        }
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes (
                'Main-Class': 'com.instructure.dataseeding.Client',
        )
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
